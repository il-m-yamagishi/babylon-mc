/**
 * K.jpg's OpenSimplex 2, smooth variant ("SuperSimplex")
 *
 * Ported from KdotJPG's OpenSimplex2S noise implementation by Csharp.
 * Successors to OpenSimplex Noise, plus updated OpenSimplex. Includes 2D, 3D, and 4D noise.
 * Original source code: https://github.com/KdotJPG/OpenSimplex2/blob/e09a94744b3d69e4c58ce615445f18712cb50104/csharp/OpenSimplex2S.cs
 * This is UNLICENSED
 * thanks KdotJPG
 */

/** 64-bit integer in C# */
type Long = bigint;
/** 32-bit integer in C# */
type Int = number;
/** 16-bit integer in C# */
type Short = number;
/** 64-bit floating point in C# */
type Double = number;
/** 32-bit floating point in C# */
type Float = number;
/** boolean in C# */
type Bool = boolean;

/** Prime X */
const PRIME_X: Long = 0x5205402b9270c86fn;
/** Prime Y */
const PRIME_Y: Long = 0x598cd327003817b5n;
/** Prime Z */
const PRIME_Z: Long = 0x5bcc226e9fa0bacbn;
/** Prime W */
const PRIME_W: Long = 0x56cc5227e58f554bn;
/** Hash multiplier */
const HASH_MULTIPLIER: Long = 0x53a3f72deec546f5n;

const ROOT2OVER2: Double = Math.SQRT1_2;
const SKEW_2D: Double = 0.366025403784439;
const UNSKEW_2D: Double = -0.21132486540518713;

const ROOT3OVER3: Double = 0.577350269189626;
const FALLBACK_ROTATE3: Double = 2.0 / 3.0;
const ROTATE3_ORTHOGONALIZER: Double = UNSKEW_2D;

const SKEW_4D: Float = 0.309016994374947;
const UNSKEW_4D: Float = -0.138196601125011;

const N_GRADS_2D_EXPONENT: Int = 7;
const N_GRADS_3D_EXPONENT: Int = 8;
const N_GRADS_4D_EXPONENT: Int = 9;
const N_GRADS_2D: Int = 1 << N_GRADS_2D_EXPONENT;
const N_GRADS_3D: Int = 1 << N_GRADS_3D_EXPONENT;
const N_GRADS_4D: Int = 1 << N_GRADS_4D_EXPONENT;

const NORMALIZER_2D: Double = 0.05481866495625118;
const NORMALIZER_3D: Double = 0.2781926117527186;
const NORMALIZER_4D: Double = 0.11127401889945551;

const RSQUARED_2D: Float = 2.0 / 3.0;
const RSQUARED_3D: Float = 3.0 / 4.0;
const RSQUARED_4D: Float = 4.0 / 5.0;

const GRADIENTS_2D = ((): Float32Array => {
  const grads = new Float32Array(N_GRADS_2D * 2);
  // biome-ignore format: This array was copied.
  const grad2: Float[] = [
    0.38268343236509,   0.923879532511287,
    0.923879532511287,  0.38268343236509,
    0.923879532511287, -0.38268343236509,
    0.38268343236509,  -0.923879532511287,
   -0.38268343236509,  -0.923879532511287,
   -0.923879532511287, -0.38268343236509,
   -0.923879532511287,  0.38268343236509,
   -0.38268343236509,   0.923879532511287,
   //-------------------------------------//
    0.130526192220052,  0.99144486137381,
    0.608761429008721,  0.793353340291235,
    0.793353340291235,  0.608761429008721,
    0.99144486137381,   0.130526192220051,
    0.99144486137381,  -0.130526192220051,
    0.793353340291235, -0.60876142900872,
    0.608761429008721, -0.793353340291235,
    0.130526192220052, -0.99144486137381,
   -0.130526192220052, -0.99144486137381,
   -0.608761429008721, -0.793353340291235,
   -0.793353340291235, -0.608761429008721,
   -0.99144486137381,  -0.130526192220052,
   -0.99144486137381,   0.130526192220051,
   -0.793353340291235,  0.608761429008721,
   -0.608761429008721,  0.793353340291235,
   -0.130526192220052,  0.99144486137381,
  ];

  for (let i: Int = 0; i < grad2.length; i++) {
    grad2[i] /= NORMALIZER_2D;
  }
  for (let i: Int = 0, j: Int = 0; i < grads.length; i++, j++) {
    if (j === grad2.length) {
      j = 0;
    }
    grads[i] = grad2[j];
  }
  return grads;
})();

const GRADIENTS_3D = ((): Float32Array => {
  const grads = new Float32Array(N_GRADS_3D * 4);
  // biome-ignore format: This array was copied.
  const grad3: Float[] = [
    2.22474487139,       2.22474487139,      -1.0,                 0.0,
    2.22474487139,       2.22474487139,       1.0,                 0.0,
    3.0862664687972017,  1.1721513422464978,  0.0,                 0.0,
    1.1721513422464978,  3.0862664687972017,  0.0,                 0.0,
   -2.22474487139,       2.22474487139,      -1.0,                 0.0,
   -2.22474487139,       2.22474487139,       1.0,                 0.0,
   -1.1721513422464978,  3.0862664687972017,  0.0,                 0.0,
   -3.0862664687972017,  1.1721513422464978,  0.0,                 0.0,
   -1.0,                -2.22474487139,      -2.22474487139,       0.0,
    1.0,                -2.22474487139,      -2.22474487139,       0.0,
    0.0,                -3.0862664687972017, -1.1721513422464978,  0.0,
    0.0,                -1.1721513422464978, -3.0862664687972017,  0.0,
   -1.0,                -2.22474487139,       2.22474487139,       0.0,
    1.0,                -2.22474487139,       2.22474487139,       0.0,
    0.0,                -1.1721513422464978,  3.0862664687972017,  0.0,
    0.0,                -3.0862664687972017,  1.1721513422464978,  0.0,
   //--------------------------------------------------------------------//
   -2.22474487139,      -2.22474487139,      -1.0,                 0.0,
   -2.22474487139,      -2.22474487139,       1.0,                 0.0,
   -3.0862664687972017, -1.1721513422464978,  0.0,                 0.0,
   -1.1721513422464978, -3.0862664687972017,  0.0,                 0.0,
   -2.22474487139,      -1.0,                -2.22474487139,       0.0,
   -2.22474487139,       1.0,                -2.22474487139,       0.0,
   -1.1721513422464978,  0.0,                -3.0862664687972017,  0.0,
   -3.0862664687972017,  0.0,                -1.1721513422464978,  0.0,
   -2.22474487139,      -1.0,                 2.22474487139,       0.0,
   -2.22474487139,       1.0,                 2.22474487139,       0.0,
   -3.0862664687972017,  0.0,                 1.1721513422464978,  0.0,
   -1.1721513422464978,  0.0,                 3.0862664687972017,  0.0,
   -1.0,                 2.22474487139,      -2.22474487139,       0.0,
    1.0,                 2.22474487139,      -2.22474487139,       0.0,
    0.0,                 1.1721513422464978, -3.0862664687972017,  0.0,
    0.0,                 3.0862664687972017, -1.1721513422464978,  0.0,
   -1.0,                 2.22474487139,       2.22474487139,       0.0,
    1.0,                 2.22474487139,       2.22474487139,       0.0,
    0.0,                 3.0862664687972017,  1.1721513422464978,  0.0,
    0.0,                 1.1721513422464978,  3.0862664687972017,  0.0,
    2.22474487139,      -2.22474487139,      -1.0,                 0.0,
    2.22474487139,      -2.22474487139,       1.0,                 0.0,
    1.1721513422464978, -3.0862664687972017,  0.0,                 0.0,
    3.0862664687972017, -1.1721513422464978,  0.0,                 0.0,
    2.22474487139,      -1.0,                -2.22474487139,       0.0,
    2.22474487139,       1.0,                -2.22474487139,       0.0,
    3.0862664687972017,  0.0,                -1.1721513422464978,  0.0,
    1.1721513422464978,  0.0,                -3.0862664687972017,  0.0,
    2.22474487139,      -1.0,                 2.22474487139,       0.0,
    2.22474487139,       1.0,                 2.22474487139,       0.0,
    1.1721513422464978,  0.0,                 3.0862664687972017,  0.0,
    3.0862664687972017,  0.0,                 1.1721513422464978,  0.0,
  ];
  for (let i: Int = 0; i < grad3.length; i++) {
    grad3[i] /= NORMALIZER_3D;
  }
  for (let i: Int = 0, j: Int = 0; i < grads.length; i++, j++) {
    if (j === grad3.length) {
      j = 0;
    }
    grads[i] = grad3[j];
  }
  return grads;
})();

const GRADIENTS_4D = ((): Float32Array => {
  const grads = new Float32Array(N_GRADS_4D * 4);
  // biome-ignore format: This array was copied.
  const grad4: Float[] = [
    -0.6740059517812944,   -0.3239847771997537,   -0.3239847771997537,    0.5794684678643381,
    -0.7504883828755602,   -0.4004672082940195,    0.15296486218853164,   0.5029860367700724,
    -0.7504883828755602,    0.15296486218853164,  -0.4004672082940195,    0.5029860367700724,
    -0.8828161875373585,    0.08164729285680945,   0.08164729285680945,   0.4553054119602712,
    -0.4553054119602712,   -0.08164729285680945,  -0.08164729285680945,   0.8828161875373585,
    -0.5029860367700724,   -0.15296486218853164,   0.4004672082940195,    0.7504883828755602,
    -0.5029860367700724,    0.4004672082940195,   -0.15296486218853164,   0.7504883828755602,
    -0.5794684678643381,    0.3239847771997537,    0.3239847771997537,    0.6740059517812944,
    -0.6740059517812944,   -0.3239847771997537,    0.5794684678643381,   -0.3239847771997537,
    -0.7504883828755602,   -0.4004672082940195,    0.5029860367700724,    0.15296486218853164,
    -0.7504883828755602,    0.15296486218853164,   0.5029860367700724,   -0.4004672082940195,
    -0.8828161875373585,    0.08164729285680945,   0.4553054119602712,    0.08164729285680945,
    -0.4553054119602712,   -0.08164729285680945,   0.8828161875373585,   -0.08164729285680945,
    -0.5029860367700724,   -0.15296486218853164,   0.7504883828755602,    0.4004672082940195,
    -0.5029860367700724,    0.4004672082940195,    0.7504883828755602,   -0.15296486218853164,
    -0.5794684678643381,    0.3239847771997537,    0.6740059517812944,    0.3239847771997537,
    -0.6740059517812944,    0.5794684678643381,   -0.3239847771997537,   -0.3239847771997537,
    -0.7504883828755602,    0.5029860367700724,   -0.4004672082940195,    0.15296486218853164,
    -0.7504883828755602,    0.5029860367700724,    0.15296486218853164,  -0.4004672082940195,
    -0.8828161875373585,    0.4553054119602712,    0.08164729285680945,   0.08164729285680945,
    -0.4553054119602712,    0.8828161875373585,   -0.08164729285680945,  -0.08164729285680945,
    -0.5029860367700724,    0.7504883828755602,   -0.15296486218853164,   0.4004672082940195,
    -0.5029860367700724,    0.7504883828755602,    0.4004672082940195,   -0.15296486218853164,
    -0.5794684678643381,    0.6740059517812944,    0.3239847771997537,    0.3239847771997537,
     0.5794684678643381,   -0.6740059517812944,   -0.3239847771997537,   -0.3239847771997537,
     0.5029860367700724,   -0.7504883828755602,   -0.4004672082940195,    0.15296486218853164,
     0.5029860367700724,   -0.7504883828755602,    0.15296486218853164,  -0.4004672082940195,
     0.4553054119602712,   -0.8828161875373585,    0.08164729285680945,   0.08164729285680945,
     0.8828161875373585,   -0.4553054119602712,   -0.08164729285680945,  -0.08164729285680945,
     0.7504883828755602,   -0.5029860367700724,   -0.15296486218853164,   0.4004672082940195,
     0.7504883828755602,   -0.5029860367700724,    0.4004672082940195,   -0.15296486218853164,
     0.6740059517812944,   -0.5794684678643381,    0.3239847771997537,    0.3239847771997537,
    //------------------------------------------------------------------------------------------//
    -0.753341017856078,    -0.37968289875261624,  -0.37968289875261624,  -0.37968289875261624,
    -0.7821684431180708,   -0.4321472685365301,   -0.4321472685365301,    0.12128480194602098,
    -0.7821684431180708,   -0.4321472685365301,    0.12128480194602098,  -0.4321472685365301,
    -0.7821684431180708,    0.12128480194602098,  -0.4321472685365301,   -0.4321472685365301,
    -0.8586508742123365,   -0.508629699630796,     0.044802370851755174,  0.044802370851755174,
    -0.8586508742123365,    0.044802370851755174, -0.508629699630796,     0.044802370851755174,
    -0.8586508742123365,    0.044802370851755174,  0.044802370851755174, -0.508629699630796,
    -0.9982828964265062,   -0.03381941603233842,  -0.03381941603233842,  -0.03381941603233842,
    -0.37968289875261624,  -0.753341017856078,    -0.37968289875261624,  -0.37968289875261624,
    -0.4321472685365301,   -0.7821684431180708,   -0.4321472685365301,    0.12128480194602098,
    -0.4321472685365301,   -0.7821684431180708,    0.12128480194602098,  -0.4321472685365301,
     0.12128480194602098,  -0.7821684431180708,   -0.4321472685365301,   -0.4321472685365301,
    -0.508629699630796,    -0.8586508742123365,    0.044802370851755174,  0.044802370851755174,
     0.044802370851755174, -0.8586508742123365,   -0.508629699630796,     0.044802370851755174,
     0.044802370851755174, -0.8586508742123365,    0.044802370851755174, -0.508629699630796,
    -0.03381941603233842,  -0.9982828964265062,   -0.03381941603233842,  -0.03381941603233842,
    -0.37968289875261624,  -0.37968289875261624,  -0.753341017856078,    -0.37968289875261624,
    -0.4321472685365301,   -0.4321472685365301,   -0.7821684431180708,    0.12128480194602098,
    -0.4321472685365301,    0.12128480194602098,  -0.7821684431180708,   -0.4321472685365301,
     0.12128480194602098,  -0.4321472685365301,   -0.7821684431180708,   -0.4321472685365301,
    -0.508629699630796,     0.044802370851755174, -0.8586508742123365,    0.044802370851755174,
     0.044802370851755174, -0.508629699630796,    -0.8586508742123365,    0.044802370851755174,
     0.044802370851755174,  0.044802370851755174, -0.8586508742123365,   -0.508629699630796,
    -0.03381941603233842,  -0.03381941603233842,  -0.9982828964265062,   -0.03381941603233842,
    -0.37968289875261624,  -0.37968289875261624,  -0.37968289875261624,  -0.753341017856078,
    -0.4321472685365301,   -0.4321472685365301,    0.12128480194602098,  -0.7821684431180708,
    -0.4321472685365301,    0.12128480194602098,  -0.4321472685365301,   -0.7821684431180708,
     0.12128480194602098,  -0.4321472685365301,   -0.4321472685365301,   -0.7821684431180708,
    -0.508629699630796,     0.044802370851755174,  0.044802370851755174, -0.8586508742123365,
     0.044802370851755174, -0.508629699630796,     0.044802370851755174, -0.8586508742123365,
     0.044802370851755174,  0.044802370851755174, -0.508629699630796,    -0.8586508742123365,
    -0.03381941603233842,  -0.03381941603233842,  -0.03381941603233842,  -0.9982828964265062,
    -0.3239847771997537,   -0.6740059517812944,   -0.3239847771997537,    0.5794684678643381,
    -0.4004672082940195,   -0.7504883828755602,    0.15296486218853164,   0.5029860367700724,
     0.15296486218853164,  -0.7504883828755602,   -0.4004672082940195,    0.5029860367700724,
     0.08164729285680945,  -0.8828161875373585,    0.08164729285680945,   0.4553054119602712,
    -0.08164729285680945,  -0.4553054119602712,   -0.08164729285680945,   0.8828161875373585,
    -0.15296486218853164,  -0.5029860367700724,    0.4004672082940195,    0.7504883828755602,
     0.4004672082940195,   -0.5029860367700724,   -0.15296486218853164,   0.7504883828755602,
     0.3239847771997537,   -0.5794684678643381,    0.3239847771997537,    0.6740059517812944,
    -0.3239847771997537,   -0.3239847771997537,   -0.6740059517812944,    0.5794684678643381,
    -0.4004672082940195,    0.15296486218853164,  -0.7504883828755602,    0.5029860367700724,
     0.15296486218853164,  -0.4004672082940195,   -0.7504883828755602,    0.5029860367700724,
     0.08164729285680945,   0.08164729285680945,  -0.8828161875373585,    0.4553054119602712,
    -0.08164729285680945,  -0.08164729285680945,  -0.4553054119602712,    0.8828161875373585,
    -0.15296486218853164,   0.4004672082940195,   -0.5029860367700724,    0.7504883828755602,
     0.4004672082940195,   -0.15296486218853164,  -0.5029860367700724,    0.7504883828755602,
     0.3239847771997537,    0.3239847771997537,   -0.5794684678643381,    0.6740059517812944,
    -0.3239847771997537,   -0.6740059517812944,    0.5794684678643381,   -0.3239847771997537,
    -0.4004672082940195,   -0.7504883828755602,    0.5029860367700724,    0.15296486218853164,
     0.15296486218853164,  -0.7504883828755602,    0.5029860367700724,   -0.4004672082940195,
     0.08164729285680945,  -0.8828161875373585,    0.4553054119602712,    0.08164729285680945,
    -0.08164729285680945,  -0.4553054119602712,    0.8828161875373585,   -0.08164729285680945,
    -0.15296486218853164,  -0.5029860367700724,    0.7504883828755602,    0.4004672082940195,
     0.4004672082940195,   -0.5029860367700724,    0.7504883828755602,   -0.15296486218853164,
     0.3239847771997537,   -0.5794684678643381,    0.6740059517812944,    0.3239847771997537,
    -0.3239847771997537,   -0.3239847771997537,    0.5794684678643381,   -0.6740059517812944,
    -0.4004672082940195,    0.15296486218853164,   0.5029860367700724,   -0.7504883828755602,
     0.15296486218853164,  -0.4004672082940195,    0.5029860367700724,   -0.7504883828755602,
     0.08164729285680945,   0.08164729285680945,   0.4553054119602712,   -0.8828161875373585,
    -0.08164729285680945,  -0.08164729285680945,   0.8828161875373585,   -0.4553054119602712,
    -0.15296486218853164,   0.4004672082940195,    0.7504883828755602,   -0.5029860367700724,
     0.4004672082940195,   -0.15296486218853164,   0.7504883828755602,   -0.5029860367700724,
     0.3239847771997537,    0.3239847771997537,    0.6740059517812944,   -0.5794684678643381,
    -0.3239847771997537,    0.5794684678643381,   -0.6740059517812944,   -0.3239847771997537,
    -0.4004672082940195,    0.5029860367700724,   -0.7504883828755602,    0.15296486218853164,
     0.15296486218853164,   0.5029860367700724,   -0.7504883828755602,   -0.4004672082940195,
     0.08164729285680945,   0.4553054119602712,   -0.8828161875373585,    0.08164729285680945,
    -0.08164729285680945,   0.8828161875373585,   -0.4553054119602712,   -0.08164729285680945,
    -0.15296486218853164,   0.7504883828755602,   -0.5029860367700724,    0.4004672082940195,
     0.4004672082940195,    0.7504883828755602,   -0.5029860367700724,   -0.15296486218853164,
     0.3239847771997537,    0.6740059517812944,   -0.5794684678643381,    0.3239847771997537,
    -0.3239847771997537,    0.5794684678643381,   -0.3239847771997537,   -0.6740059517812944,
    -0.4004672082940195,    0.5029860367700724,    0.15296486218853164,  -0.7504883828755602,
     0.15296486218853164,   0.5029860367700724,   -0.4004672082940195,   -0.7504883828755602,
     0.08164729285680945,   0.4553054119602712,    0.08164729285680945,  -0.8828161875373585,
    -0.08164729285680945,   0.8828161875373585,   -0.08164729285680945,  -0.4553054119602712,
    -0.15296486218853164,   0.7504883828755602,    0.4004672082940195,   -0.5029860367700724,
     0.4004672082940195,    0.7504883828755602,   -0.15296486218853164,  -0.5029860367700724,
     0.3239847771997537,    0.6740059517812944,    0.3239847771997537,   -0.5794684678643381,
     0.5794684678643381,   -0.3239847771997537,   -0.6740059517812944,   -0.3239847771997537,
     0.5029860367700724,   -0.4004672082940195,   -0.7504883828755602,    0.15296486218853164,
     0.5029860367700724,    0.15296486218853164,  -0.7504883828755602,   -0.4004672082940195,
     0.4553054119602712,    0.08164729285680945,  -0.8828161875373585,    0.08164729285680945,
     0.8828161875373585,   -0.08164729285680945,  -0.4553054119602712,   -0.08164729285680945,
     0.7504883828755602,   -0.15296486218853164,  -0.5029860367700724,    0.4004672082940195,
     0.7504883828755602,    0.4004672082940195,   -0.5029860367700724,   -0.15296486218853164,
     0.6740059517812944,    0.3239847771997537,   -0.5794684678643381,    0.3239847771997537,
     0.5794684678643381,   -0.3239847771997537,   -0.3239847771997537,   -0.6740059517812944,
     0.5029860367700724,   -0.4004672082940195,    0.15296486218853164,  -0.7504883828755602,
     0.5029860367700724,    0.15296486218853164,  -0.4004672082940195,   -0.7504883828755602,
     0.4553054119602712,    0.08164729285680945,   0.08164729285680945,  -0.8828161875373585,
     0.8828161875373585,   -0.08164729285680945,  -0.08164729285680945,  -0.4553054119602712,
     0.7504883828755602,   -0.15296486218853164,   0.4004672082940195,   -0.5029860367700724,
     0.7504883828755602,    0.4004672082940195,   -0.15296486218853164,  -0.5029860367700724,
     0.6740059517812944,    0.3239847771997537,    0.3239847771997537,   -0.5794684678643381,
     0.03381941603233842,   0.03381941603233842,   0.03381941603233842,   0.9982828964265062,
    -0.044802370851755174, -0.044802370851755174,  0.508629699630796,     0.8586508742123365,
    -0.044802370851755174,  0.508629699630796,    -0.044802370851755174,  0.8586508742123365,
    -0.12128480194602098,   0.4321472685365301,    0.4321472685365301,    0.7821684431180708,
     0.508629699630796,    -0.044802370851755174, -0.044802370851755174,  0.8586508742123365,
     0.4321472685365301,   -0.12128480194602098,   0.4321472685365301,    0.7821684431180708,
     0.4321472685365301,    0.4321472685365301,   -0.12128480194602098,   0.7821684431180708,
     0.37968289875261624,   0.37968289875261624,   0.37968289875261624,   0.753341017856078,
     0.03381941603233842,   0.03381941603233842,   0.9982828964265062,    0.03381941603233842,
    -0.044802370851755174,  0.044802370851755174,  0.8586508742123365,    0.508629699630796,
    -0.044802370851755174,  0.508629699630796,     0.8586508742123365,   -0.044802370851755174,
    -0.12128480194602098,   0.4321472685365301,    0.7821684431180708,    0.4321472685365301,
     0.508629699630796,    -0.044802370851755174,  0.8586508742123365,   -0.044802370851755174,
     0.4321472685365301,   -0.12128480194602098,   0.7821684431180708,    0.4321472685365301,
     0.4321472685365301,    0.4321472685365301,    0.7821684431180708,   -0.12128480194602098,
     0.37968289875261624,   0.37968289875261624,   0.753341017856078,     0.37968289875261624,
     0.03381941603233842,   0.9982828964265062,    0.03381941603233842,   0.03381941603233842,
    -0.044802370851755174,  0.8586508742123365,   -0.044802370851755174,  0.508629699630796,
    -0.044802370851755174,  0.8586508742123365,    0.508629699630796,    -0.044802370851755174,
    -0.12128480194602098,   0.7821684431180708,    0.4321472685365301,    0.4321472685365301,
     0.508629699630796,     0.8586508742123365,   -0.044802370851755174, -0.044802370851755174,
     0.4321472685365301,    0.7821684431180708,   -0.12128480194602098,   0.4321472685365301,
     0.4321472685365301,    0.7821684431180708,    0.4321472685365301,   -0.12128480194602098,
     0.37968289875261624,   0.753341017856078,     0.37968289875261624,   0.37968289875261624,
     0.9982828964265062,    0.03381941603233842,   0.03381941603233842,   0.03381941603233842,
     0.8586508742123365,   -0.044802370851755174, -0.044802370851755174,  0.508629699630796,
     0.8586508742123365,   -0.044802370851755174,  0.508629699630796,    -0.044802370851755174,
     0.7821684431180708,   -0.12128480194602098,   0.4321472685365301,    0.4321472685365301,
     0.8586508742123365,    0.508629699630796,    -0.044802370851755174, -0.044802370851755174,
     0.7821684431180708,    0.4321472685365301,   -0.12128480194602098,   0.4321472685365301,
     0.7821684431180708,    0.4321472685365301,    0.4321472685365301,   -0.12128480194602098,
     0.753341017856078,     0.37968289875261624,   0.37968289875261624,   0.37968289875261624,
  ];
  for (let i: Int = 0; i < grad4.length; i++) {
    grad4[i] /= NORMALIZER_4D;
  }
  for (let i: Int = 0, j: Int = 0; i < grads.length; i++, j++) {
    if (j === grad4.length) {
      j = 0;
    }
    grads[i] = grad4[j];
  }
  return grads;
})();

type SecondaryIndexes = [Short, Short];
class LatticeVertex4D {
  public readonly dx: Float;
  public readonly dy: Float;
  public readonly dz: Float;
  public readonly dw: Float;
  public readonly xsvp: Long;
  public readonly ysvp: Long;
  public readonly zsvp: Long;
  public readonly wsvp: Long;
  public constructor(xsv: Int, ysv: Int, zsv: Int, wsv: Int) {
    this.xsvp = BigInt(xsv) * PRIME_X;
    this.ysvp = BigInt(ysv) * PRIME_Y;
    this.zsvp = BigInt(zsv) * PRIME_Z;
    this.wsvp = BigInt(wsv) * PRIME_W;
    const ssv = (xsv + ysv + zsv + wsv) * UNSKEW_4D;
    this.dx = -xsv - ssv;
    this.dy = -ysv - ssv;
    this.dz = -zsv - ssv;
    this.dw = -wsv - ssv;
  }
}

const [LOOKUP_4D_A, LOOKUP_4D_B] = ((): [SecondaryIndexes[], LatticeVertex4D[]] => {
  // biome-ignore format: This array was copied.
  const lookup4dVertexCodes: Int[][] = [
    [ 0x15, 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x15, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA ],
    [ 0x01, 0x05, 0x11, 0x15, 0x41, 0x45, 0x51, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA ],
    [ 0x01, 0x15, 0x16, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x15, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA ],
    [ 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xAA ],
    [ 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xAA ],
    [ 0x05, 0x15, 0x16, 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xAA, 0xAB ],
    [ 0x04, 0x05, 0x14, 0x15, 0x44, 0x45, 0x54, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA ],
    [ 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xAA ],
    [ 0x05, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0xAA ],
    [ 0x05, 0x15, 0x16, 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x5B, 0x6A, 0x9A, 0xAA, 0xAB ],
    [ 0x04, 0x15, 0x19, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x05, 0x15, 0x19, 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xAA, 0xAE ],
    [ 0x05, 0x15, 0x19, 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x5E, 0x6A, 0x9A, 0xAA, 0xAE ],
    [ 0x05, 0x15, 0x1A, 0x45, 0x4A, 0x55, 0x56, 0x59, 0x5A, 0x5B, 0x5E, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
    [ 0x15, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x11, 0x15, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xAA ],
    [ 0x11, 0x15, 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xAA ],
    [ 0x11, 0x15, 0x16, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xAA, 0xAB ],
    [ 0x14, 0x15, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA9, 0xAA ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x9A, 0xA6, 0xA9, 0xAA ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x15, 0x16, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x6B, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x14, 0x15, 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xAA ],
    [ 0x15, 0x16, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x6B, 0x9A, 0xAA, 0xAB ],
    [ 0x14, 0x15, 0x19, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA, 0xAE ],
    [ 0x15, 0x19, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x6E, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x15, 0x19, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x6E, 0x9A, 0xAA, 0xAE ],
    [ 0x15, 0x1A, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x6B, 0x6E, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
    [ 0x10, 0x11, 0x14, 0x15, 0x50, 0x51, 0x54, 0x55, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x11, 0x15, 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xAA ],
    [ 0x11, 0x15, 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0xA6, 0xAA ],
    [ 0x11, 0x15, 0x16, 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x67, 0x6A, 0xA6, 0xAA, 0xAB ],
    [ 0x14, 0x15, 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA9, 0xAA ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA6, 0xAA ],
    [ 0x15, 0x16, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x6B, 0xA6, 0xAA, 0xAB ],
    [ 0x14, 0x15, 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0xA9, 0xAA ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA9, 0xAA ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xAA ],
    [ 0x15, 0x16, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0xAA, 0xAB ],
    [ 0x14, 0x15, 0x19, 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x6A, 0x6D, 0xA9, 0xAA, 0xAE ],
    [ 0x15, 0x19, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x6E, 0xA9, 0xAA, 0xAE ],
    [ 0x15, 0x19, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6E, 0xAA, 0xAE ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x6B, 0x6E, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
    [ 0x10, 0x15, 0x25, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x11, 0x15, 0x25, 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xAA, 0xBA ],
    [ 0x11, 0x15, 0x25, 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x6A, 0x76, 0xA6, 0xAA, 0xBA ],
    [ 0x11, 0x15, 0x26, 0x51, 0x55, 0x56, 0x62, 0x65, 0x66, 0x67, 0x6A, 0x76, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
    [ 0x14, 0x15, 0x25, 0x54, 0x55, 0x59, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA9, 0xAA, 0xBA ],
    [ 0x15, 0x25, 0x55, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x15, 0x25, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA6, 0xAA, 0xBA ],
    [ 0x15, 0x26, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x6B, 0x7A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
    [ 0x14, 0x15, 0x25, 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x6A, 0x79, 0xA9, 0xAA, 0xBA ],
    [ 0x15, 0x25, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA9, 0xAA, 0xBA ],
    [ 0x15, 0x25, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xAA, 0xBA ],
    [ 0x15, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0x7A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
    [ 0x14, 0x15, 0x29, 0x54, 0x55, 0x59, 0x65, 0x68, 0x69, 0x6A, 0x6D, 0x79, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
    [ 0x15, 0x29, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x6E, 0x7A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
    [ 0x15, 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6E, 0x7A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0x6E, 0x7A, 0xAA, 0xAB, 0xAE, 0xBA, 0xBF ],
    [ 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x41, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA ],
    [ 0x41, 0x45, 0x51, 0x55, 0x56, 0x5A, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xAA ],
    [ 0x41, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x44, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x45, 0x46, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB ],
    [ 0x44, 0x45, 0x54, 0x55, 0x59, 0x5A, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xAA ],
    [ 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x9A, 0x9B, 0xAA, 0xAB ],
    [ 0x44, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x45, 0x49, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE ],
    [ 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x99, 0x9A, 0x9E, 0xAA, 0xAE ],
    [ 0x45, 0x4A, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xAF ],
    [ 0x50, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x51, 0x55, 0x56, 0x59, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB ],
    [ 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x56, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x15, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE ],
    [ 0x15, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE ],
    [ 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
    [ 0x50, 0x51, 0x54, 0x55, 0x65, 0x66, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xAA ],
    [ 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xA7, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x15, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x15, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA ],
    [ 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA9, 0xAA ],
    [ 0x15, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xA6, 0xA9, 0xAA ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA, 0xAD, 0xAE ],
    [ 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
    [ 0x50, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x66, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x51, 0x55, 0x61, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA ],
    [ 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x6A, 0xA5, 0xA6, 0xAA, 0xB6, 0xBA ],
    [ 0x51, 0x55, 0x56, 0x62, 0x65, 0x66, 0x6A, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xBB ],
    [ 0x54, 0x55, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA ],
    [ 0x55, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x55, 0x56, 0x65, 0x66, 0x6A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
    [ 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x6A, 0xA5, 0xA9, 0xAA, 0xB9, 0xBA ],
    [ 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x15, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
    [ 0x54, 0x55, 0x59, 0x65, 0x68, 0x69, 0x6A, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xBE ],
    [ 0x55, 0x59, 0x65, 0x69, 0x6A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
    [ 0x15, 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xAA, 0xAB, 0xAE, 0xBA, 0xBF ],
    [ 0x40, 0x41, 0x44, 0x45, 0x50, 0x51, 0x54, 0x55, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x41, 0x45, 0x51, 0x55, 0x56, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA ],
    [ 0x41, 0x45, 0x51, 0x55, 0x56, 0x95, 0x96, 0x9A, 0xA6, 0xAA ],
    [ 0x41, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x95, 0x96, 0x97, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x44, 0x45, 0x54, 0x55, 0x59, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA ],
    [ 0x45, 0x46, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB ],
    [ 0x44, 0x45, 0x54, 0x55, 0x59, 0x95, 0x99, 0x9A, 0xA9, 0xAA ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xAA ],
    [ 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0xAA, 0xAB ],
    [ 0x44, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x95, 0x99, 0x9A, 0x9D, 0xA9, 0xAA, 0xAE ],
    [ 0x45, 0x49, 0x55, 0x59, 0x5A, 0x95, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE ],
    [ 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9E, 0xAA, 0xAE ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x99, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xAF ],
    [ 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA ],
    [ 0x51, 0x52, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xEA ],
    [ 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA ],
    [ 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xEA ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x58, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE ],
    [ 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x99, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF ],
    [ 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA ],
    [ 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA ],
    [ 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB ],
    [ 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE ],
    [ 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAE ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xAF ],
    [ 0x50, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB5, 0xBA ],
    [ 0x51, 0x55, 0x61, 0x65, 0x66, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA ],
    [ 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xB6, 0xBA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xBB ],
    [ 0x54, 0x55, 0x64, 0x65, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA ],
    [ 0x55, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA5, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB ],
    [ 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xB9, 0xBA ],
    [ 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA ],
    [ 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA, 0xBB ],
    [ 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xBE ],
    [ 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA5, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
    [ 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xBA ],
    [ 0x40, 0x45, 0x51, 0x54, 0x55, 0x85, 0x91, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x41, 0x45, 0x51, 0x55, 0x56, 0x85, 0x91, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA, 0xEA ],
    [ 0x41, 0x45, 0x51, 0x55, 0x56, 0x85, 0x91, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xD6, 0xEA ],
    [ 0x41, 0x45, 0x51, 0x55, 0x56, 0x86, 0x92, 0x95, 0x96, 0x97, 0x9A, 0xA6, 0xAA, 0xAB, 0xD6, 0xEA, 0xEB ],
    [ 0x44, 0x45, 0x54, 0x55, 0x59, 0x85, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xEA ],
    [ 0x45, 0x55, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xDA, 0xEA ],
    [ 0x45, 0x55, 0x56, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xDA, 0xEA ],
    [ 0x45, 0x55, 0x56, 0x86, 0x95, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0xDA, 0xEA, 0xEB ],
    [ 0x44, 0x45, 0x54, 0x55, 0x59, 0x85, 0x94, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xD9, 0xEA ],
    [ 0x45, 0x55, 0x59, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xDA, 0xEA ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0xDA, 0xEA ],
    [ 0x45, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0xDA, 0xEA, 0xEB ],
    [ 0x44, 0x45, 0x54, 0x55, 0x59, 0x89, 0x95, 0x98, 0x99, 0x9A, 0x9D, 0xA9, 0xAA, 0xAE, 0xD9, 0xEA, 0xEE ],
    [ 0x45, 0x55, 0x59, 0x89, 0x95, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0xDA, 0xEA, 0xEE ],
    [ 0x45, 0x55, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0xDA, 0xEA, 0xEE ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xDA, 0xEA, 0xEF ],
    [ 0x50, 0x51, 0x54, 0x55, 0x65, 0x91, 0x94, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x51, 0x55, 0x91, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xE6, 0xEA ],
    [ 0x51, 0x55, 0x56, 0x91, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xE6, 0xEA ],
    [ 0x51, 0x55, 0x56, 0x92, 0x95, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB, 0xE6, 0xEA, 0xEB ],
    [ 0x54, 0x55, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xE9, 0xEA ],
    [ 0x55, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x55, 0x56, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x55, 0x56, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB ],
    [ 0x54, 0x55, 0x59, 0x94, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xE9, 0xEA ],
    [ 0x55, 0x59, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x45, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB ],
    [ 0x54, 0x55, 0x59, 0x95, 0x98, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE, 0xE9, 0xEA, 0xEE ],
    [ 0x55, 0x59, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE ],
    [ 0x45, 0x55, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0xAB, 0xAE, 0xEA, 0xEF ],
    [ 0x50, 0x51, 0x54, 0x55, 0x65, 0x91, 0x94, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xE5, 0xEA ],
    [ 0x51, 0x55, 0x65, 0x91, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xE6, 0xEA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x91, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xE6, 0xEA ],
    [ 0x51, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xE6, 0xEA, 0xEB ],
    [ 0x54, 0x55, 0x65, 0x94, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xE9, 0xEA ],
    [ 0x55, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x51, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB ],
    [ 0x54, 0x55, 0x59, 0x65, 0x69, 0x94, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xE9, 0xEA ],
    [ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x55, 0x56, 0x59, 0x65, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA ],
    [ 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xEA, 0xEB ],
    [ 0x54, 0x55, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xE9, 0xEA, 0xEE ],
    [ 0x54, 0x55, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE ],
    [ 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xEA ],
    [ 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0xA1, 0xA4, 0xA5, 0xA6, 0xA9, 0xAA, 0xB5, 0xBA, 0xE5, 0xEA, 0xFA ],
    [ 0x51, 0x55, 0x65, 0x95, 0xA1, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0xE6, 0xEA, 0xFA ],
    [ 0x51, 0x55, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0xE6, 0xEA, 0xFA ],
    [ 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xE6, 0xEA, 0xFB ],
    [ 0x54, 0x55, 0x65, 0x95, 0xA4, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0xE9, 0xEA, 0xFA ],
    [ 0x55, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA ],
    [ 0x51, 0x55, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA ],
    [ 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xAB, 0xBA, 0xEA, 0xFB ],
    [ 0x54, 0x55, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0xE9, 0xEA, 0xFA ],
    [ 0x54, 0x55, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA ],
    [ 0x55, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA ],
    [ 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA, 0xEA ],
    [ 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xE9, 0xEA, 0xFE ],
    [ 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAE, 0xBA, 0xEA, 0xFE ],
    [ 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA, 0xEA ],
    [ 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xBA, 0xEA ],
  ];
  const latticeVerticesByCode = new Array<LatticeVertex4D>(256);
  for (let i = 0; i < 256; i++) {
    latticeVerticesByCode[i] = new LatticeVertex4D(
      ((i >> 0) & 3) - 1,
      ((i >> 2) & 3) - 1,
      ((i >> 4) & 3) - 1,
      ((i >> 6) & 3) - 1,
    );
  }
  let nLatticeVerticesTotal: Int = 0;
  for (let i: Int = 0; i < 256; i++) {
    nLatticeVerticesTotal += lookup4dVertexCodes[i].length;
  }
  const lookup4da = new Array<SecondaryIndexes>(256);
  const lookup4db = new Array<LatticeVertex4D>(nLatticeVerticesTotal);
  for (let i: Int = 0, j: Int = 0; i < 256; i++) {
    lookup4da[i] = [j % 65535, lookup4dVertexCodes[i].length % 65535];
    // biome-ignore lint/style/useForOf: This code was copied.
    for (let k: Int = 0; k < lookup4dVertexCodes[i].length; k++) {
      lookup4db[j++] = latticeVerticesByCode[lookup4dVertexCodes[i][k]];
    }
  }
  return [lookup4da, lookup4db];
})();

function grad2(seed: Long, xsvp: Long, ysvp: Long, dx: Float, dy: Float): Float {
  let hash = seed ^ xsvp ^ ysvp;
  hash *= HASH_MULTIPLIER;
  hash ^= hash >> (64n - BigInt(N_GRADS_2D_EXPONENT) + 1n);
  const gi = Number(hash) & ((N_GRADS_2D - 1) << 1);
  return GRADIENTS_2D[gi | 0] * dx + GRADIENTS_2D[gi | 1] * dy;
}

function grad3(seed: Long, xsvp: Long, ysvp: Long, zsvp: Long, dx: Float, dy: Float, dz: Float): Float {
  let hash = seed ^ xsvp ^ (ysvp ^ zsvp);
  hash *= HASH_MULTIPLIER;
  hash ^= hash >> (64n - BigInt(N_GRADS_3D_EXPONENT) + 2n);
  const gi = Number(hash) & ((N_GRADS_3D - 1) << 2);
  return GRADIENTS_3D[gi | 0] * dx + GRADIENTS_3D[gi | 1] * dy + GRADIENTS_3D[gi | 2] * dz;
}

function grad4(
  seed: Long,
  xsvp: Long,
  ysvp: Long,
  zsvp: Long,
  wsvp: Long,
  dx: Float,
  dy: Float,
  dz: Float,
  dw: Float,
): Float {
  let hash = seed ^ (xsvp ^ ysvp) ^ (zsvp ^ wsvp);
  hash *= HASH_MULTIPLIER;
  hash ^= hash >> (64n - BigInt(N_GRADS_4D_EXPONENT) + 2n);
  const gi = Number(hash) & ((N_GRADS_4D - 1) << 2);
  return (
    GRADIENTS_4D[gi | 0] * dx + GRADIENTS_4D[gi | 1] * dy + (GRADIENTS_4D[gi | 2] * dz + GRADIENTS_4D[gi | 3] * dw)
  );
}

function fastFloor(x: Double): Int {
  const xi = x | 0;
  return x < xi ? xi - 1 : xi;
}

/**
 * 2D OpenSimplex2S/SuperSimplex noise, standard lattice orientation.
 */
export function noise2(seed: Long, x: Double, y: Double): Float {
  // Get points for A2* lattice
  const s = SKEW_2D * (x + y);
  const xs = x + s;
  const ys = y + s;

  return noise2UnskewedBase(seed, xs, ys);
}

/**
 * 2D OpenSimplex2S/SuperSimplex noise, with Y pointing down the main diagonal.
 * Might be better for a 2D sandbox style game, where Y is vertical.
 * Probably slightly less optimal for heightmaps or continent maps,
 * unless your map is centered around an equator. It's a slight
 * difference, but the option is here to make it easy.
 */
export function noise2ImproveX(seed: Long, x: Double, y: Double): Float {
  // Skew transform and rotation baked into one.
  const xx = x * ROOT2OVER2;
  const yy = y * (ROOT2OVER2 * (1 + 2 * SKEW_2D));

  return noise2UnskewedBase(seed, yy + xx, yy - xx);
}

/**
 * 2D  OpenSimplex2S/SuperSimplex noise base.
 */
// biome-ignore lint/complexity/noExcessiveCognitiveComplexity: <explanation>
function noise2UnskewedBase(seed: Long, xs: Double, ys: Double): Float {
  // Get base points and offsets
  const xsb: Int = fastFloor(xs);
  const ysb: Int = fastFloor(ys);
  const xi: Float = xs - xsb;
  const yi: Float = ys - ysb;

  // Prime pre-multiplication for hash.
  const xsbp: Long = BigInt(xsb) * PRIME_X;
  const ysbp: Long = BigInt(ysb) * PRIME_Y;

  // Unskew.
  const t: Float = (xi + yi) * UNSKEW_2D;
  const dx0: Float = xi + t;
  const dy0: Float = yi + t;

  // First vertex.
  const a0: Float = RSQUARED_2D - dx0 * dx0 - dy0 * dy0;
  let value: Float = a0 * a0 * (a0 * a0) * grad2(seed, xsbp, ysbp, dx0, dy0);

  // Second vertex.
  const a1: Float =
    2 * (1 + 2 * UNSKEW_2D) * (1 / UNSKEW_2D + 2) * t + (-2 * (1 + 2 * UNSKEW_2D) * (1 + 2 * UNSKEW_2D) + a0);
  const dx1: Float = dx0 - (1 + 2 * UNSKEW_2D);
  const dy1: Float = dy0 - (1 + 2 * UNSKEW_2D);
  value += a1 * a1 * (a1 * a1) * grad2(seed, xsbp + PRIME_X, ysbp + PRIME_Y, dx1, dy1);

  // Third and fourth vertices.
  // Nested conditionals were faster than compact bit logic/arithmetic.
  const xmyi: Float = xi - yi;
  if (t < UNSKEW_2D) {
    if (xi + xmyi > 1) {
      const dx2: Float = dx0 - (3 * UNSKEW_2D + 2);
      const dy2: Float = dy0 - (3 * UNSKEW_2D + 1);
      const a2: Float = RSQUARED_2D - dx2 * dx2 - dy2 * dy2;
      if (a2 > 0) {
        value += a2 * a2 * (a2 * a2) * grad2(seed, xsbp + (PRIME_X << 1n), ysbp + PRIME_Y, dx2, dy2);
      }
    } else {
      const dx2: Float = dx0 - UNSKEW_2D;
      const dy2: Float = dy0 - (UNSKEW_2D + 1);
      const a2: Float = RSQUARED_2D - dx2 * dx2 - dy2 * dy2;
      if (a2 > 0) {
        value += a2 * a2 * (a2 * a2) * grad2(seed, xsbp, ysbp + PRIME_Y, dx2, dy2);
      }
    }

    if (yi - xmyi > 1) {
      const dx3: Float = dx0 - (3 * UNSKEW_2D + 1);
      const dy3: Float = dy0 - (3 * UNSKEW_2D + 2);
      const a3: Float = RSQUARED_2D - dx3 * dx3 - dy3 * dy3;
      if (a3 > 0) {
        value += a3 * a3 * (a3 * a3) * grad2(seed, xsbp + PRIME_X, ysbp + (PRIME_Y << 1n), dx3, dy3);
      }
    } else {
      const dx3: Float = dx0 - (UNSKEW_2D + 1);
      const dy3: Float = dy0 - UNSKEW_2D;
      const a3: Float = RSQUARED_2D - dx3 * dx3 - dy3 * dy3;
      if (a3 > 0) {
        value += a3 * a3 * (a3 * a3) * grad2(seed, xsbp + PRIME_X, ysbp, dx3, dy3);
      }
    }
  } else {
    // biome-ignore lint/style/useCollapsedElseIf: copied.
    if (yi < xmyi) {
      const dx2: Float = dx0 + UNSKEW_2D;
      const dy2: Float = dy0 + (UNSKEW_2D + 1);
      const a2: Float = RSQUARED_2D - dx2 * dx2 - dy2 * dy2;
      if (a2 > 0) {
        value += a2 * a2 * (a2 * a2) * grad2(seed, xsbp, ysbp - PRIME_Y, dx2, dy2);
      }
    } else {
      const dx2: Float = dx0 - UNSKEW_2D;
      const dy2: Float = dy0 - (UNSKEW_2D + 1);
      const a2: Float = RSQUARED_2D - dx2 * dx2 - dy2 * dy2;
      if (a2 > 0) {
        value += a2 * a2 * (a2 * a2) * grad2(seed, xsbp, ysbp + PRIME_Y, dx2, dy2);
      }
    }
  }
  return value;
}

/**
 * 3D OpenSimplex2S/SuperSimplex noise, with better visual isotropy in (X, Y).
 * Recommended for 3D terrain and time-varied animations.
 * The Z coordinate should always be the "different" coordinate in whatever your use case is.
 * If Y is vertical in world coordinates, call Noise3_ImproveXZ(x, z, Y) or use Noise3_XZBeforeY.
 * If Z is vertical in world coordinates, call Noise3_ImproveXZ(x, y, Z).
 * For a time varied animation, call Noise3_ImproveXY(x, y, T).
 */
export function noise3ImproveXY(seed: Long, x: Double, y: Double, z: Double): Float {
  // Re-orient the cubic lattices without skewing, so Z points up the main lattice diagonal,
  // and the planes formed by XY are moved far out of alignment with the cube faces.
  // Orthonormal rotation. Not a skew transform.
  const xy: Double = x + y;
  const s2: Double = xy * ROTATE3_ORTHOGONALIZER;
  const zz: Double = z * ROOT3OVER3;
  const xr: Double = x + s2 + zz;
  const yr: Double = y + s2 + zz;
  const zr: Double = xy * -ROOT3OVER3 + zz;

  // Evaluate both lattices to form a BCC lattice.
  return noise3UnrotatedBase(seed, xr, yr, zr);
}

/**
 * 3D OpenSimplex2S/SuperSimplex noise, with better visual isotropy in (X, Z).
 * Recommended for 3D terrain and time-varied animations.
 * The Y coordinate should always be the "different" coordinate in whatever your use case is.
 * If Y is vertical in world coordinates, call Noise3_ImproveXZ(x, Y, z).
 * If Z is vertical in world coordinates, call Noise3_ImproveXZ(x, Z, y) or use Noise3_ImproveXY.
 * For a time varied animation, call Noise3_ImproveXZ(x, T, y) or use Noise3_ImproveXY.
 */
export function noise3ImprovedXZ(seed: Long, x: Double, y: Double, z: Double): Float {
  // Re-orient the cubic lattices without skewing, so Y points up the main lattice diagonal,
  // and the planes formed by XZ are moved far out of alignment with the cube faces.
  // Orthonormal rotation. Not a skew transform.
  const xz: Double = x + z;
  const s2: Double = xz * -0.211324865405187;
  const yy: Double = y * ROOT3OVER3;
  const xr: Double = x + s2 + yy;
  const zr: Double = z + s2 + yy;
  const yr: Double = xz * -ROOT3OVER3 + yy;

  // Evaluate both lattices to form a BCC lattice.
  return noise3UnrotatedBase(seed, xr, yr, zr);
}

/**
 * 3D OpenSimplex2S/SuperSimplex noise, fallback rotation option
 * Use Noise3_ImproveXY or Noise3_ImproveXZ instead, wherever appropriate.
 * They have less diagonal bias. This function's best use is as a fallback.
 */
export function noise3Fallback(seed: Long, x: Double, y: Double, z: Double): Float {
  // Re-orient the cubic lattices via rotation, to produce a familiar look.
  // Orthonormal rotation. Not a skew transform.
  const r: Double = FALLBACK_ROTATE3 * (x + y + z);
  const xr: Double = r - x;
  const yr: Double = r - y;
  const zr: Double = r - z;

  // Evaluate both lattices to form a BCC lattice.
  return noise3UnrotatedBase(seed, xr, yr, zr);
}

/**
 * Generate overlapping cubic lattices for 3D Re-oriented BCC noise.
 * Lookup table implementation inspired by DigitalShadow.
 * It was actually faster to narrow down the points in the loop itself,
 * than to build up the index with enough info to isolate 8 points.
 */
// biome-ignore lint/complexity/noExcessiveCognitiveComplexity: <explanation>
function noise3UnrotatedBase(seed: Long, xr: Double, yr: Double, zr: Double): Float {
  // Get base points and offsets.
  const xrb: Int = fastFloor(xr);
  const yrb: Int = fastFloor(yr);
  const zrb: Int = fastFloor(zr);
  const xi: Float = xr - xrb;
  const yi: Float = yr - yrb;
  const zi: Float = zr - zrb;

  // Prime pre-multiplication for hash. Also flip seed for second lattice copy.
  const xrbp: Long = BigInt(xrb) * PRIME_X;
  const yrbp: Long = BigInt(yrb) * PRIME_Y;
  const zrbp: Long = BigInt(zrb) * PRIME_Z;
  const seed2: Long = seed ^ -0x52d547b2e96ed629n;

  // -1 if positive, 0 if negative.
  const xNMask: Int = fastFloor(-0.5 - xi);
  const yNMask: Int = fastFloor(-0.5 - yi);
  const zNMask: Int = fastFloor(-0.5 - zi);

  // First vertex.
  const x0: Float = xi + xNMask;
  const y0: Float = yi + yNMask;
  const z0: Float = zi + zNMask;
  const a0: Float = RSQUARED_3D - x0 * x0 - y0 * y0 - z0 * z0;
  let value: Float =
    a0 *
    a0 *
    (a0 * a0) *
    grad3(
      seed,
      xrbp + (BigInt(xNMask) & PRIME_X),
      yrbp + (BigInt(yNMask) & PRIME_Y),
      zrbp + (BigInt(zNMask) & PRIME_Z),
      x0,
      y0,
      z0,
    );

  // Second vertex.
  const x1: Float = xi - 0.5;
  const y1: Float = yi - 0.5;
  const z1: Float = zi - 0.5;
  const a1: Float = RSQUARED_3D - x1 * x1 - y1 * y1 - z1 * z1;
  value += a1 * a1 * (a1 * a1) * grad3(seed2, xrbp + PRIME_X, yrbp + PRIME_Y, zrbp + PRIME_Z, x1, y1, z1);

  // Shortcuts for building the remaining falloffs.
  // Derived by subtracting the polynomials with the offsets plugged in.
  const xAFlipMask0: Float = ((xNMask | 1) << 1) * x1;
  const yAFlipMask0: Float = ((yNMask | 1) << 1) * y1;
  const zAFlipMask0: Float = ((zNMask | 1) << 1) * z1;
  const xAFlipMask1: Float = (-2 - (xNMask << 2)) * x1 - 1.0;
  const yAFlipMask1: Float = (-2 - (yNMask << 2)) * y1 - 1.0;
  const zAFlipMask1: Float = (-2 - (zNMask << 2)) * z1 - 1.0;

  let skip5: Bool = false;
  const a2: Float = xAFlipMask0 + a0;
  if (a2 > 0) {
    const x2: Float = x0 - (xNMask | 1);
    const y2: Float = y0;
    const z2: Float = z0;
    value +=
      a2 *
      a2 *
      (a2 * a2) *
      grad3(
        seed,
        xrbp + (~BigInt(xNMask) & PRIME_X),
        yrbp + (BigInt(yNMask) & PRIME_Y),
        zrbp + (BigInt(zNMask) & PRIME_Z),
        x2,
        y2,
        z2,
      );
  } else {
    const a3: Float = yAFlipMask0 + zAFlipMask0 + a0;
    if (a3 > 0) {
      const x3: Float = x0;
      const y3: Float = y0 - (yNMask | 1);
      const z3: Float = z0 - (zNMask | 1);
      value +=
        a3 *
        a3 *
        (a3 * a3) *
        grad3(
          seed,
          xrbp + (BigInt(xNMask) & PRIME_X),
          yrbp + (~BigInt(yNMask) & PRIME_Y),
          zrbp + (~BigInt(zNMask) & PRIME_Z),
          x3,
          y3,
          z3,
        );
    }

    const a4: Float = xAFlipMask1 + a1;
    if (a4 > 0) {
      const x4: Float = (xNMask | 1) + x1;
      const y4: Float = y1;
      const z4: Float = z1;
      value +=
        a4 *
        a4 *
        (a4 * a4) *
        grad3(seed2, xrbp + (BigInt(xNMask) & (PRIME_X * 2n)), yrbp + PRIME_Y, zrbp + PRIME_Z, x4, y4, z4);
      skip5 = true;
    }
  }

  let skip9: Bool = false;
  const a6: Float = yAFlipMask0 + a0;
  if (a6 > 0) {
    const x6: Float = x0;
    const y6: Float = y0 - (yNMask | 1);
    const z6: Float = z0;
    value +=
      a6 *
      a6 *
      (a6 * a6) *
      grad3(
        seed,
        xrbp + (BigInt(xNMask) & PRIME_X),
        yrbp + (~BigInt(yNMask) & PRIME_Y),
        zrbp + (BigInt(zNMask) & PRIME_Z),
        x6,
        y6,
        z6,
      );
  } else {
    const a7: Float = xAFlipMask0 + zAFlipMask0 + a0;
    if (a7 > 0) {
      const x7: Float = x0 - (xNMask | 1);
      const y7: Float = y0;
      const z7: Float = z0 - (zNMask | 1);
      value +=
        a7 *
        a7 *
        (a7 * a7) *
        grad3(
          seed,
          xrbp + (~BigInt(xNMask) & PRIME_X),
          yrbp + (BigInt(yNMask) & PRIME_Y),
          zrbp + (~BigInt(zNMask) & PRIME_Z),
          x7,
          y7,
          z7,
        );
    }

    const a8: Float = yAFlipMask1 + a1;
    if (a8 > 0) {
      const x8: Float = x1;
      const y8: Float = (yNMask | 1) + y1;
      const z8: Float = z1;
      value +=
        a8 *
        a8 *
        (a8 * a8) *
        grad3(seed2, xrbp + PRIME_X, yrbp + (BigInt(yNMask) & (PRIME_Y << 1n)), zrbp + PRIME_Z, x8, y8, z8);
      skip9 = true;
    }
  }

  let skipD: Bool = false;
  const aA: Float = zAFlipMask0 + a0;
  if (aA > 0) {
    const xA: Float = x0;
    const yA: Float = y0;
    const zA: Float = z0 - (zNMask | 1);
    value +=
      aA *
      aA *
      (aA * aA) *
      grad3(
        seed,
        xrbp + (BigInt(xNMask) & PRIME_X),
        yrbp + (BigInt(yNMask) & PRIME_Y),
        zrbp + (~BigInt(zNMask) & PRIME_Z),
        xA,
        yA,
        zA,
      );
  } else {
    const aB: Float = xAFlipMask0 + yAFlipMask0 + a0;
    if (aB > 0) {
      const xB: Float = x0 - (xNMask | 1);
      const yB: Float = y0 - (yNMask | 1);
      const zB: Float = z0;
      value +=
        aB *
        aB *
        (aB * aB) *
        grad3(
          seed,
          xrbp + (~BigInt(xNMask) & PRIME_X),
          yrbp + (~BigInt(yNMask) & PRIME_Y),
          zrbp + (BigInt(zNMask) & PRIME_Z),
          xB,
          yB,
          zB,
        );
    }

    const aC: Float = zAFlipMask1 + a1;
    if (aC > 0) {
      const xC: Float = x1;
      const yC: Float = y1;
      const zC: Float = (zNMask | 1) + z1;
      value +=
        aC *
        aC *
        (aC * aC) *
        grad3(seed2, xrbp + PRIME_X, yrbp + PRIME_Y, zrbp + (BigInt(zNMask) & (PRIME_Z << 1n)), xC, yC, zC);
      skipD = true;
    }
  }

  if (!skip5) {
    const a5: Float = yAFlipMask1 + zAFlipMask1 + a1;
    if (a5 > 0) {
      const x5: Float = x1;
      const y5: Float = (yNMask | 1) + y1;
      const z5: Float = (zNMask | 1) + z1;
      value +=
        a5 *
        a5 *
        (a5 * a5) *
        grad3(
          seed2,
          xrbp + PRIME_X,
          yrbp + (BigInt(yNMask) & (PRIME_Y << 1n)),
          zrbp + (BigInt(zNMask) & (PRIME_Z << 1n)),
          x5,
          y5,
          z5,
        );
    }
  }

  if (!skip9) {
    const a9: Float = xAFlipMask1 + zAFlipMask1 + a1;
    if (a9 > 0) {
      const x9: Float = (xNMask | 1) + x1;
      const y9: Float = y1;
      const z9: Float = (zNMask | 1) + z1;
      value +=
        a9 *
        a9 *
        (a9 * a9) *
        grad3(
          seed2,
          xrbp + (BigInt(xNMask) & (PRIME_X * 2n)),
          yrbp + PRIME_Y,
          zrbp + (BigInt(zNMask) & (PRIME_Z << 1n)),
          x9,
          y9,
          z9,
        );
    }
  }

  if (!skipD) {
    const aD: Float = xAFlipMask1 + yAFlipMask1 + a1;
    if (aD > 0) {
      const xD: Float = (xNMask | 1) + x1;
      const yD: Float = (yNMask | 1) + y1;
      const zD: Float = z1;
      value +=
        aD *
        aD *
        (aD * aD) *
        grad3(
          seed2,
          xrbp + (BigInt(xNMask) & (PRIME_X << 1n)),
          yrbp + (BigInt(yNMask) & (PRIME_Y << 1n)),
          zrbp + PRIME_Z,
          xD,
          yD,
          zD,
        );
    }
  }

  return value;
}

/**
 * 4D SuperSimplex noise, with XYZ oriented like Noise3_ImproveXY
 * and W for an extra degree of freedom. W repeats eventually.
 * Recommended for time-varied animations which texture a 3D object (W=time)
 * in a space where Z is vertical
 */
export function noise4ImproveXYZImproveXY(seed: Long, x: Double, y: Double, z: Double, w: Double): Float {
  const xy: Double = x + y;
  const s2: Double = xy * Number("-0.21132486540518699998");
  const zz: Double = z * Number("0.28867513459481294226");
  const ww: Double = w * 1.118033988749894;
  const xr: Double = x + (zz + ww + s2);
  const yr: Double = y + (zz + ww + s2);
  const zr: Double = xy * Number("-0.57735026918962599998") + (zz + ww);
  const wr: Double = z * -0.866025403784439 + ww;

  return noise4UnskewedBase(seed, xr, yr, zr, wr);
}

/**
 * 4D SuperSimplex noise, with XYZ oriented like Noise3_ImproveXZ
 * and W for an extra degree of freedom. W repeats eventually.
 * Recommended for time-varied animations which texture a 3D object (W=time)
 * in a space where Y is vertical
 */
export function noise4ImproveXYZImproveXZ(seed: Long, x: Double, y: Double, z: Double, w: Double): Float {
  const xz: Double = x + z;
  const s2: Double = xz * Number("-0.21132486540518699998");
  const yy: Double = y * Number("0.28867513459481294226");
  const ww: Double = w * 1.118033988749894;
  const xr: Double = x + (yy + ww + s2);
  const zr: Double = z + (yy + ww + s2);
  const yr: Double = xz * Number("-0.57735026918962599998") + (yy + ww);
  const wr: Double = y * -0.866025403784439 + ww;

  return noise4UnskewedBase(seed, xr, yr, zr, wr);
}

/**
 * 4D SuperSimplex noise, with XYZ oriented like Noise3_Fallback
 * and W for an extra degree of freedom. W repeats eventually.
 * Recommended for time-varied animations which texture a 3D object (W=time)
 * where there isn't a clear distinction between horizontal and vertical
 */
export function noise4ImproveXYZ(seed: Long, x: Double, y: Double, z: Double, w: Double): Float {
  const xyz: Double = x + y + z;
  const ww: Double = w * 1.118033988749894;
  const s2: Double = xyz * -0.16666666666666666 + ww;
  const xs: Double = x + s2;
  const ys: Double = y + s2;
  const zs: Double = z + s2;
  const ws: Double = -0.5 * xyz + ww;

  return noise4UnskewedBase(seed, xs, ys, zs, ws);
}

/**
 * 4D SuperSimplex noise, fallback lattice orientation.
 */
export function noise4Fallback(seed: Long, x: Double, y: Double, z: Double, w: Double): Float {
  // Get points for A4 lattice
  const s: Double = SKEW_4D * (x + y + z + w);
  const xs: Double = x + s;
  const ys: Double = y + s;
  const zs: Double = z + s;
  const ws: Double = w + s;

  return noise4UnskewedBase(seed, xs, ys, zs, ws);
}

/**
 * 4D SuperSimplex noise base.
 * Using ultra-simple 4x4x4x4 lookup partitioning.
 * This isn't as elegant or SIMD/GPU/etc. portable as other approaches,
 * but it competes performance-wise with optimized 2014 OpenSimplex.
 */
function noise4UnskewedBase(seed: Long, xs: Double, ys: Double, zs: Double, ws: Double): Float {
  // Get base points and offsets
  const xsb: Int = fastFloor(xs);
  const ysb: Int = fastFloor(ys);
  const zsb: Int = fastFloor(zs);
  const wsb: Int = fastFloor(ws);
  const xsi: Float = xs - xsb;
  const ysi: Float = ys - ysb;
  const zsi: Float = zs - zsb;
  const wsi: Float = ws - wsb;

  // Unskewed offsets
  const ssi: Float = (xsi + ysi + zsi + wsi) * UNSKEW_4D;
  const xi: Float = xsi + ssi;
  const yi: Float = ysi + ssi;
  const zi: Float = zsi + ssi;
  const wi: Float = wsi + ssi;

  // Prime pre-multiplication for hash.
  const xsvp: Long = BigInt(xsb) * PRIME_X;
  const ysvp: Long = BigInt(ysb) * PRIME_Y;
  const zsvp: Long = BigInt(zsb) * PRIME_Z;
  const wsvp: Long = BigInt(wsb) * PRIME_W;

  // Index into initial table.
  const index: Int =
    ((fastFloor(xs * 4) & 3) << 0) |
    ((fastFloor(ys * 4) & 3) << 2) |
    ((fastFloor(zs * 4) & 3) << 4) |
    ((fastFloor(ws * 4) & 3) << 6);

  // Point contributions
  let value: Float = 0;
  const [secondaryIndexStart, secondaryIndexStop] = LOOKUP_4D_A[index];
  for (let i: Int = secondaryIndexStart; i < secondaryIndexStop; i++) {
    const c: LatticeVertex4D = LOOKUP_4D_B[i];
    const dx: Float = xi + c.dx;
    const dy: Float = yi + c.dy;
    const dz: Float = zi + c.dz;
    const dw: Float = wi + c.dw;
    let a: Float = dx * dx + dy * dy + (dz * dz + dw * dw);
    if (a < RSQUARED_4D) {
      a -= RSQUARED_4D;
      a *= a;
      value += a * a * grad4(seed, xsvp + c.xsvp, ysvp + c.ysvp, zsvp + c.zsvp, wsvp + c.wsvp, dx, dy, dz, dw);
    }
  }
  return value;
}
